### Title: Modern Portfolio Optimization
### Aliases: mpo-package mpo
### Keywords: package
### ** Examples
returns = midcap.ts[,1:10]
mathEfrontRisky(returns, 10, display=FALSE, digits = 3)
base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("mpo-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("opt.outputMeanVol")
### * opt.outputMeanVol
flush(stderr()); flush(stdout())
base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: opt.outputMeanVol
### Title: opt.outputMeanVol
### Aliases: opt.outputMeanVol
### Keywords: ~kwd1 ~kwd2
### ** Examples
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.
## The function is currently defined as
function (opt, returns, digits = NULL, names = NULL)
{
wts = opt$weights
sigmasq = as.numeric(t(wts) %*% var(returns) %*% wts)
sigma = sqrt(sigmasq)
mu.ret = apply(returns, 2, mean)
mu = as.numeric(t(wts) %*% mu.ret)
if (is.null(digits)) {
names(sigma) = "sigma"
names(mu) = "mu"
output = c(wts, mu, sigma)
}
else {
if (is.null(names)) {
output = list(wts = wts, mean = mu, vol = sigma)
output = lapply(output, round, digits)
}
else {
output = list(wts, mu, sigma)
names(output) = names
output = lapply(output, round, digits)
}
}
output
}
base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("opt.outputMeanVol", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("opt.outputMeanVolWts")
### * opt.outputMeanVolWts
flush(stderr()); flush(stdout())
base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: opt.outputMeanVolWts
### Title: opt.outputMeanVolWts
### Aliases: opt.outputMeanVolWts
### Keywords: ~kwd1 ~kwd2
### ** Examples
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.
## The function is currently defined as
function (opt, returns, digits = NULL, names = NULL)
{
wts = opt$weights
sigmasq = as.numeric(t(wts) %*% var(returns) %*% wts)
sigma = sqrt(sigmasq)
mu.ret = apply(returns, 2, mean)
mu = as.numeric(t(wts) %*% mu.ret)
if (is.null(digits)) {
output = wts
}
else {
if (is.null(names)) {
output = list(wts = wts)
output = lapply(output, round, digits)
}
else {
output = list(wts = wts)
names(output) = names
output = lapply(output, round, digits)
}
}
output
}
base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("opt.outputMeanVolWts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("smallcap.ts")
### * smallcap.ts
flush(stderr()); flush(stdout())
base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: smallcap.ts
### Title: smallcap.ts
### Aliases: smallcap.ts
### Keywords: datasets
### ** Examples
data(smallcap.ts)
## maybe str(smallcap.ts) ; plot(smallcap.ts) ...
base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("smallcap.ts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("smallcapM")
### * smallcapM
flush(stderr()); flush(stdout())
base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: smallcapM
### Title: smallcapM
### Aliases: smallcapM
### Keywords: datasets
### ** Examples
data(smallcapM)
## maybe str(smallcapM) ; plot(smallcapM) ...
base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("smallcapM", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("smallcapW")
### * smallcapW
flush(stderr()); flush(stdout())
base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: smallcapW
### Title: smallcapW
### Aliases: smallcapW
### Keywords: datasets
### ** Examples
data(smallcapW)
## maybe str(smallcapW) ; plot(smallcapW) ...
base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("smallcapW", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("table.Performance")
### * table.Performance
flush(stderr()); flush(stdout())
base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: table.Performance
### Title: Generate general performance table for returns
### Aliases: table.Performance
### Keywords: measure metrics performance table
### ** Examples
library(PerformanceAnalytics,lib="C:/R/R-3.1.0/library_forge")
data(edhec)
# Example 1: start with NULL specification
res <- table.Performance(R=edhec,verbose=T, interactive=TRUE)
# Example 2: start with Var and ES
res.ex2 <- table.Performance(edhec,metrics=c("VaR", "ES"),
metricsNames=c("Modified VaR","Modified Expected Shortfall"),verbose=T)
# Example 3: Non-interactive
arg.list <- list(
ES=list(method=c("modified","test"),
p=0.9),
VaR=list(method=c("gaussian"))
)
res.ex3 <- table.Performance(R=edhec,metrics=c("VaR", "ES"), interactive=FALSE,
arg.list=arg.list, verbose=T, digits=4)
# Example 4: Latex code
arg.list <- list(
ES=list(method=c("modified"),
p=0.9),
VaR=list(method=c("gaussian"))
)
res.ex4 <- table.Performance(R=edhec,metrics=c("VaR", "ES"), interactive=FALSE,
arg.list=arg.list, verbose=T, digits=4, latex=TRUE)
# Example 5: Export function
res.ex5 <- table.Performance(R=edhec,metrics=c("VaR", "ES"), interactive=TRUE, verbose=T,
digits=4, latex=FALSE, exportFun="myfun1", flag.pre.arg.list=FALSE)
myfun1(R=edhec)
# myfun1 uses res.ex5's metrics and optional arguments
args(myfun1)
# Example 6: Export XLSX
res.ex6 <- table.Performance(R=edhec,metrics=c("VaR", "ES"), interactive=FALSE,
arg.list=arg.list, verbose=T, digits=4, latex=TRUE, exportXLS=TRUE,ExcelFileName="PerformanceReport.xls")
base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("table.Performance", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("table.Performance.pool")
### * table.Performance.pool
flush(stderr()); flush(stdout())
base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: table.Performance.pool
### Title: Print metrics from R-forge PerformanceAnalytics that compatible
###   with table.Performance
### Aliases: table.Performance.pool
### Keywords: measure metrics performance table
### ** Examples
table.Performance.pool()
base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("table.Performance.pool", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("table.Performance.pool.cran")
### * table.Performance.pool.cran
flush(stderr()); flush(stdout())
base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: table.Performance.pool.cran
### Title: Print metrics from R CRAN PerformanceAnalytics that compatible
###   with table.Performance
### Aliases: table.Performance.pool.cran
### Keywords: measure metrics performance table
### ** Examples
table.Performance.pool.cran()
base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("table.Performance.pool.cran", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
### * <FOOTER>
###
options(digits = 7L)
base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
grDevices::dev.off()
###
### Local variables: ***
### mode: outline-minor ***
### outline-regexp: "\\(> \\)?### [*]+" ***
### End: ***
quit('no')
install.packages("boot")
getwd()
roxygen2::roxygenise()
data(edhec)
SharpeRatio(edhec[, 6, drop = FALSE], FUN="VaR")
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR")
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR" , method="gaussian")
SharpeRatio(edhec[, 6, drop = FALSE], FUN="ES")
SharpeRatio(managers[,1:9], Rf = managers[,10,drop=FALSE])
data(managers)
R =managers[,1:2,drop=FALSE]
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR", bootsd=TRUE)
data(managers)
SharpeRatio(managers[,1,drop=FALSE], Rf=.035/12, FUN="StdDev")
SharpeRatio(managers[,1,drop=FALSE], Rf = managers[,10,drop=FALSE], FUN="StdDev")
SharpeRatio(managers[,1:6], Rf=.035/12, FUN="StdDev")
SharpeRatio(managers[,1:6], Rf = managers[,10,drop=FALSE], FUN="StdDev")
data(edhec)
SharpeRatio(edhec[, 6, drop = FALSE], FUN="VaR")
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR")
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR" , method="gaussian")
SharpeRatio(edhec[, 6, drop = FALSE], FUN="ES")
# and all the methods
SharpeRatio(managers[,1:9], Rf = managers[,10,drop=FALSE])
SharpeRatio(edhec,Rf = .04/12)
# bootstrap sd
R =managers[,1:2,drop=FALSE]
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR", bootsd=TRUE)
data(managers)
SharpeRatio(managers[,1,drop=FALSE], Rf=.035/12, FUN="StdDev")
SharpeRatio(managers[,1,drop=FALSE], Rf = managers[,10,drop=FALSE], FUN="StdDev")
SharpeRatio(managers[,1:6], Rf=.035/12, FUN="StdDev")
SharpeRatio(managers[,1:6], Rf = managers[,10,drop=FALSE], FUN="StdDev")
data(edhec)
SharpeRatio(edhec[, 6, drop = FALSE], FUN="VaR")
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR")
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR" , method="gaussian")
SharpeRatio(edhec[, 6, drop = FALSE], FUN="ES")
# and all the methods
SharpeRatio(managers[,1:9], Rf = managers[,10,drop=FALSE])
SharpeRatio(edhec,Rf = .04/12)
# bootstrap sd
R =managers[,1:2,drop=FALSE]
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR", bootsd=TRUE)
base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("SharpeRatio", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("UncertaintyMeasure")
### * UncertaintyMeasure
flush(stderr()); flush(stdout())
base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: var.se
### Title: Uncertainty measure of Variance Estimator This function returns
###   the standard error of the three estimator of Variance.
### Aliases: var.se
### Keywords: bootstrap estimation, variance
### ** Examples
data(edhec)
var.se(edhec[,1],methods="normal")
pkgname <- "mpo"
source(file.path(R.home("share"), "R", "examples-header.R"))
options(warn = 1)
options(pager = "console")
base::assign(".ExTimings", "mpo-Ex.timings", pos = 'CheckExEnv')
base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
base::assign(".format_ptime",
function(x) {
if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
options(OutDec = '.')
format(x[1L:3L], digits = 7L)
},
pos = 'CheckExEnv')
### * </HEADER>
library('mpo')
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR", bootsd=TRUE)
SharpeRatio
roxygen2::roxygenise()
library(mpo)
?SharpeRatio
?SharpeRatio
?SharpeRatio
load("C:/Dropbox/doug/MPO/mpo/pkg/data/crsp.returns8.rda")
ls()
crsp.returns8
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR", bootsd=TRUE)
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR", bootsd=TRUE)
FUNC
Debug(SharpeRatio())
debug(SharpeRatio
)
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR", bootsd=TRUE)
R
FUN
R = checkData(R)
FUN <- match.arg(FUN)
FUN="VaR"
bootsd=TRUE
Rf = .04/12
R = checkData(R)
FUN <- match.arg(FUN)
FUN
if (!is.null(dim(Rf)))
Rf = checkData(Rf)
if (annualize) {
freq = periodicity(R)
switch(freq$scale, minute = {
stop("Data periodicity too high")
}, hourly = {
stop("Data periodicity too high")
}, daily = {
scale = 252
}, weekly = {
scale = 52
}, monthly = {
scale = 12
}, quarterly = {
scale = 4
}, yearly = {
scale = 1
})
}
else {
scale = 1
}
R = checkData(R)
FUN <- match.arg(FUN)
if (!is.null(dim(Rf)))
Rf = checkData(Rf)
if (annualize) {
freq = periodicity(R)
switch(freq$scale, minute = {
stop("Data periodicity too high")
}, hourly = {
stop("Data periodicity too high")
}, daily = {
scale = 252
}, weekly = {
scale = 52
}, monthly = {
scale = 12
}, quarterly = {
scale = 4
}, yearly = {
scale = 1
})
} 	else {
scale = 1
}
annualize = FALSE
weights = NULL
R = checkData(R)
FUN <- match.arg(FUN)
if (!is.null(dim(Rf)))
Rf = checkData(Rf)
if (annualize) {
freq = periodicity(R)
switch(freq$scale, minute = {
stop("Data periodicity too high")
}, hourly = {
stop("Data periodicity too high")
}, daily = {
scale = 252
}, weekly = {
scale = 52
}, monthly = {
scale = 12
}, quarterly = {
scale = 4
}, yearly = {
scale = 1
})
} 	else {
scale = 1
}
srm <- function(R, ..., Rf, p, FUNC) {
FUNCT <- match.fun(FUNC)
xR = Return.excess(R, Rf)
SRM = mean(xR, na.rm = TRUE)/FUNCT(R = R, p = p, ... = ...,
invert = FALSE)
SRM
}
sra <- function(R, ..., Rf, p, FUNC) {
if (FUNC == "StdDev")
FUNC = "StdDev.annualized"
FUNCT <- match.fun(FUNC)
xR = Return.excess(R, Rf)
SRA = Return.annualized(xR)/FUNCT(R = R, p = p, ... = ...,
invert = FALSE)
SRA
}
boot.sd.fn <- function(X,idx,...,Rf, p, FUNC, FUN_ma) # FUN_ma: selecting srm.boot or sra
{
match.fun(FUN_ma)(X[idx],Rf=Rf,FUNC=FUNC,p=p)
}
boot.sd <- function(X, ..., Rf, p, FUNC, FUN_ma)
{
boot.res = boot(X, statistic=boot.sd.fn, FUN_ma=FUN_ma, Rf=Rf, p=p, R=10*length(X), FUNC=FUNC)
sd(as.vector(boot.res$t))
}
i = 1
if (is.null(weights)) {
result = matrix(nrow = length(FUN), ncol = ncol(R))
colnames(result) = colnames(R)
if(bootsd){
result.boot.sd = matrix(nrow=length(FUN), ncol=ncol(R))
}
}
else {
result = matrix(nrow = length(FUN))
}
tmprownames = vector()
i = 1
if (is.null(weights)) {
result = matrix(nrow = length(FUN), ncol = ncol(R))
colnames(result) = colnames(R)
if(bootsd){
result.boot.sd = matrix(nrow=length(FUN), ncol=ncol(R))
}
} 	else {
result = matrix(nrow = length(FUN))
}
tmprownames = vector()
if(bootsd) require(boot)
FUNCT
FUN
FUNCT="VaR"
is.null(weights)
if (annualize) {
result[i, ] = sapply(R, FUN = sra, Rf = Rf, p = p,
FUNC = FUNCT, ...)
if(bootsd)
result.boot.sd[i,] = sapply(R,FUN=boot.sd, Rf=Rf, p=p, FUNC=FUNCT,FUN_ma="sra",...)
}
else {result[i, ] = sapply(R, FUN = srm, Rf = Rf,
p = p, FUNC = FUNCT, ...)
if(bootsd)
result.boot.sd[i,] = sapply(R,FUN=boot.sd,Rf=Rf, p=p, FUNC=FUNCT,FUN_ma="srm",...)
}
annualize
result[i, ] = sapply(R, FUN = srm, Rf = Rf,
p = p, FUNC = FUNCT, ...)
sapply(R, FUN = srm, Rf = Rf,
p = p, FUNC = FUNCT)
annualize
?sapply
FUNCT
FUN
sapply(R,FUN=boot.sd, Rf=Rf, p=p, FUNC=FUNCT,FUN_ma="sra")
sapply(R,boot.sd, Rf=Rf, p=p, FUNC=FUNCT,FUN_ma="sra")
debug(sra)
sapply(R,boot.sd, Rf=Rf, p=p, FUNC=FUNCT,FUN_ma="sra")
FUNC
debug(sra)
sapply(R,boot.sd, Rf=Rf, p=p, FUNC=FUNCT,FUN_ma="sra")
FUNC == "StdDev"
FUNCT
FUNCT <- match.fun(FUNC)
FUNCT
FUNCT
Return.excess(R, Rf)
xR = Return.excess(R, Rf)
FUNCT(R = R, p = p, ... = ...,
invert = FALSE)
FUNCT
FUNC
FUN_ma
FUN
FUNCT
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR", bootsd=TRUE)
undebug(SharpeRatio)
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR", bootsd=TRUE)
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR", bootsd=TRUE)
library(mpo)
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR", bootsd=TRUE)
roxygen2::roxygenise()
library(mpo)
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR", bootsd=TRUE)
debug(SharpeRatio)
SharpeRatio(edhec[, 6, drop = FALSE], Rf = .04/12, FUN="VaR", bootsd=TRUE)
library(mpo)
roxygen2::roxygenise()
library(mpo)
?SharpeRatio
roxygen2::roxygenise()
library(mpo)
roxygen2::roxygenise()
library(mpo)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(mpo)
library(mpo)
roxygen2::roxygenise()
library(mpo)
roxygen2::roxygenise()
library(mpo)
?table.Performance
